// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: cosmos/nft/tx.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Imversed.Nft {
  /// <summary>
  /// Msg defines the nft Msg service.
  /// </summary>
  public static partial class Msg
  {
    static readonly string __ServiceName = "imversed.nft.Msg";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Imversed.Nft.MsgIssueDenom> __Marshaller_imversed_nft_MsgIssueDenom = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Imversed.Nft.MsgIssueDenom.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Imversed.Nft.MsgIssueDenomResponse> __Marshaller_imversed_nft_MsgIssueDenomResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Imversed.Nft.MsgIssueDenomResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Imversed.Nft.MsgUpdateDenom> __Marshaller_imversed_nft_MsgUpdateDenom = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Imversed.Nft.MsgUpdateDenom.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Imversed.Nft.MsgUpdateDenomResponse> __Marshaller_imversed_nft_MsgUpdateDenomResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Imversed.Nft.MsgUpdateDenomResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Imversed.Nft.MsgMintNFT> __Marshaller_imversed_nft_MsgMintNFT = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Imversed.Nft.MsgMintNFT.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Imversed.Nft.MsgMintNFTResponse> __Marshaller_imversed_nft_MsgMintNFTResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Imversed.Nft.MsgMintNFTResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Imversed.Nft.MsgEditNFT> __Marshaller_imversed_nft_MsgEditNFT = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Imversed.Nft.MsgEditNFT.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Imversed.Nft.MsgEditNFTResponse> __Marshaller_imversed_nft_MsgEditNFTResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Imversed.Nft.MsgEditNFTResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Imversed.Nft.MsgTransferNFT> __Marshaller_imversed_nft_MsgTransferNFT = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Imversed.Nft.MsgTransferNFT.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Imversed.Nft.MsgTransferNFTResponse> __Marshaller_imversed_nft_MsgTransferNFTResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Imversed.Nft.MsgTransferNFTResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Imversed.Nft.MsgBurnNFT> __Marshaller_imversed_nft_MsgBurnNFT = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Imversed.Nft.MsgBurnNFT.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Imversed.Nft.MsgBurnNFTResponse> __Marshaller_imversed_nft_MsgBurnNFTResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Imversed.Nft.MsgBurnNFTResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Imversed.Nft.MsgTransferDenom> __Marshaller_imversed_nft_MsgTransferDenom = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Imversed.Nft.MsgTransferDenom.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Imversed.Nft.MsgTransferDenomResponse> __Marshaller_imversed_nft_MsgTransferDenomResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Imversed.Nft.MsgTransferDenomResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Imversed.Nft.MsgIssueDenom, global::Imversed.Nft.MsgIssueDenomResponse> __Method_IssueDenom = new grpc::Method<global::Imversed.Nft.MsgIssueDenom, global::Imversed.Nft.MsgIssueDenomResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "IssueDenom",
        __Marshaller_imversed_nft_MsgIssueDenom,
        __Marshaller_imversed_nft_MsgIssueDenomResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Imversed.Nft.MsgUpdateDenom, global::Imversed.Nft.MsgUpdateDenomResponse> __Method_UpdateDenom = new grpc::Method<global::Imversed.Nft.MsgUpdateDenom, global::Imversed.Nft.MsgUpdateDenomResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateDenom",
        __Marshaller_imversed_nft_MsgUpdateDenom,
        __Marshaller_imversed_nft_MsgUpdateDenomResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Imversed.Nft.MsgMintNFT, global::Imversed.Nft.MsgMintNFTResponse> __Method_MintNFT = new grpc::Method<global::Imversed.Nft.MsgMintNFT, global::Imversed.Nft.MsgMintNFTResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "MintNFT",
        __Marshaller_imversed_nft_MsgMintNFT,
        __Marshaller_imversed_nft_MsgMintNFTResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Imversed.Nft.MsgEditNFT, global::Imversed.Nft.MsgEditNFTResponse> __Method_EditNFT = new grpc::Method<global::Imversed.Nft.MsgEditNFT, global::Imversed.Nft.MsgEditNFTResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "EditNFT",
        __Marshaller_imversed_nft_MsgEditNFT,
        __Marshaller_imversed_nft_MsgEditNFTResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Imversed.Nft.MsgTransferNFT, global::Imversed.Nft.MsgTransferNFTResponse> __Method_TransferNFT = new grpc::Method<global::Imversed.Nft.MsgTransferNFT, global::Imversed.Nft.MsgTransferNFTResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TransferNFT",
        __Marshaller_imversed_nft_MsgTransferNFT,
        __Marshaller_imversed_nft_MsgTransferNFTResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Imversed.Nft.MsgBurnNFT, global::Imversed.Nft.MsgBurnNFTResponse> __Method_BurnNFT = new grpc::Method<global::Imversed.Nft.MsgBurnNFT, global::Imversed.Nft.MsgBurnNFTResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "BurnNFT",
        __Marshaller_imversed_nft_MsgBurnNFT,
        __Marshaller_imversed_nft_MsgBurnNFTResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Imversed.Nft.MsgTransferDenom, global::Imversed.Nft.MsgTransferDenomResponse> __Method_TransferDenom = new grpc::Method<global::Imversed.Nft.MsgTransferDenom, global::Imversed.Nft.MsgTransferDenomResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TransferDenom",
        __Marshaller_imversed_nft_MsgTransferDenom,
        __Marshaller_imversed_nft_MsgTransferDenomResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Imversed.Nft.TxReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Msg</summary>
    [grpc::BindServiceMethod(typeof(Msg), "BindService")]
    public abstract partial class MsgBase
    {
      /// <summary>
      /// IssueDenom defines a method for issue a denom.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Imversed.Nft.MsgIssueDenomResponse> IssueDenom(global::Imversed.Nft.MsgIssueDenom request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///UpdateDenom defines a method for update a denom
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Imversed.Nft.MsgUpdateDenomResponse> UpdateDenom(global::Imversed.Nft.MsgUpdateDenom request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// MintNFT defines a method for mint a new nft
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Imversed.Nft.MsgMintNFTResponse> MintNFT(global::Imversed.Nft.MsgMintNFT request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// RefundHTLC defines a method for editing a nft.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Imversed.Nft.MsgEditNFTResponse> EditNFT(global::Imversed.Nft.MsgEditNFT request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// TransferNFT defines a method for transferring a nft.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Imversed.Nft.MsgTransferNFTResponse> TransferNFT(global::Imversed.Nft.MsgTransferNFT request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// BurnNFT defines a method for burning a nft.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Imversed.Nft.MsgBurnNFTResponse> BurnNFT(global::Imversed.Nft.MsgBurnNFT request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// TransferDenom defines a method for transferring a denom.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Imversed.Nft.MsgTransferDenomResponse> TransferDenom(global::Imversed.Nft.MsgTransferDenom request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Msg</summary>
    public partial class MsgClient : grpc::ClientBase<MsgClient>
    {
      /// <summary>Creates a new client for Msg</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public MsgClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Msg that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public MsgClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected MsgClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected MsgClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// IssueDenom defines a method for issue a denom.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Imversed.Nft.MsgIssueDenomResponse IssueDenom(global::Imversed.Nft.MsgIssueDenom request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return IssueDenom(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// IssueDenom defines a method for issue a denom.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Imversed.Nft.MsgIssueDenomResponse IssueDenom(global::Imversed.Nft.MsgIssueDenom request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_IssueDenom, null, options, request);
      }
      /// <summary>
      /// IssueDenom defines a method for issue a denom.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Imversed.Nft.MsgIssueDenomResponse> IssueDenomAsync(global::Imversed.Nft.MsgIssueDenom request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return IssueDenomAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// IssueDenom defines a method for issue a denom.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Imversed.Nft.MsgIssueDenomResponse> IssueDenomAsync(global::Imversed.Nft.MsgIssueDenom request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_IssueDenom, null, options, request);
      }
      /// <summary>
      ///UpdateDenom defines a method for update a denom
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Imversed.Nft.MsgUpdateDenomResponse UpdateDenom(global::Imversed.Nft.MsgUpdateDenom request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateDenom(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///UpdateDenom defines a method for update a denom
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Imversed.Nft.MsgUpdateDenomResponse UpdateDenom(global::Imversed.Nft.MsgUpdateDenom request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateDenom, null, options, request);
      }
      /// <summary>
      ///UpdateDenom defines a method for update a denom
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Imversed.Nft.MsgUpdateDenomResponse> UpdateDenomAsync(global::Imversed.Nft.MsgUpdateDenom request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateDenomAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///UpdateDenom defines a method for update a denom
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Imversed.Nft.MsgUpdateDenomResponse> UpdateDenomAsync(global::Imversed.Nft.MsgUpdateDenom request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateDenom, null, options, request);
      }
      /// <summary>
      /// MintNFT defines a method for mint a new nft
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Imversed.Nft.MsgMintNFTResponse MintNFT(global::Imversed.Nft.MsgMintNFT request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MintNFT(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// MintNFT defines a method for mint a new nft
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Imversed.Nft.MsgMintNFTResponse MintNFT(global::Imversed.Nft.MsgMintNFT request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_MintNFT, null, options, request);
      }
      /// <summary>
      /// MintNFT defines a method for mint a new nft
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Imversed.Nft.MsgMintNFTResponse> MintNFTAsync(global::Imversed.Nft.MsgMintNFT request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MintNFTAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// MintNFT defines a method for mint a new nft
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Imversed.Nft.MsgMintNFTResponse> MintNFTAsync(global::Imversed.Nft.MsgMintNFT request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_MintNFT, null, options, request);
      }
      /// <summary>
      /// RefundHTLC defines a method for editing a nft.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Imversed.Nft.MsgEditNFTResponse EditNFT(global::Imversed.Nft.MsgEditNFT request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EditNFT(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RefundHTLC defines a method for editing a nft.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Imversed.Nft.MsgEditNFTResponse EditNFT(global::Imversed.Nft.MsgEditNFT request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_EditNFT, null, options, request);
      }
      /// <summary>
      /// RefundHTLC defines a method for editing a nft.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Imversed.Nft.MsgEditNFTResponse> EditNFTAsync(global::Imversed.Nft.MsgEditNFT request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EditNFTAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RefundHTLC defines a method for editing a nft.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Imversed.Nft.MsgEditNFTResponse> EditNFTAsync(global::Imversed.Nft.MsgEditNFT request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_EditNFT, null, options, request);
      }
      /// <summary>
      /// TransferNFT defines a method for transferring a nft.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Imversed.Nft.MsgTransferNFTResponse TransferNFT(global::Imversed.Nft.MsgTransferNFT request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TransferNFT(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// TransferNFT defines a method for transferring a nft.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Imversed.Nft.MsgTransferNFTResponse TransferNFT(global::Imversed.Nft.MsgTransferNFT request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TransferNFT, null, options, request);
      }
      /// <summary>
      /// TransferNFT defines a method for transferring a nft.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Imversed.Nft.MsgTransferNFTResponse> TransferNFTAsync(global::Imversed.Nft.MsgTransferNFT request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TransferNFTAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// TransferNFT defines a method for transferring a nft.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Imversed.Nft.MsgTransferNFTResponse> TransferNFTAsync(global::Imversed.Nft.MsgTransferNFT request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TransferNFT, null, options, request);
      }
      /// <summary>
      /// BurnNFT defines a method for burning a nft.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Imversed.Nft.MsgBurnNFTResponse BurnNFT(global::Imversed.Nft.MsgBurnNFT request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BurnNFT(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// BurnNFT defines a method for burning a nft.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Imversed.Nft.MsgBurnNFTResponse BurnNFT(global::Imversed.Nft.MsgBurnNFT request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_BurnNFT, null, options, request);
      }
      /// <summary>
      /// BurnNFT defines a method for burning a nft.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Imversed.Nft.MsgBurnNFTResponse> BurnNFTAsync(global::Imversed.Nft.MsgBurnNFT request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BurnNFTAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// BurnNFT defines a method for burning a nft.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Imversed.Nft.MsgBurnNFTResponse> BurnNFTAsync(global::Imversed.Nft.MsgBurnNFT request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_BurnNFT, null, options, request);
      }
      /// <summary>
      /// TransferDenom defines a method for transferring a denom.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Imversed.Nft.MsgTransferDenomResponse TransferDenom(global::Imversed.Nft.MsgTransferDenom request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TransferDenom(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// TransferDenom defines a method for transferring a denom.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Imversed.Nft.MsgTransferDenomResponse TransferDenom(global::Imversed.Nft.MsgTransferDenom request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TransferDenom, null, options, request);
      }
      /// <summary>
      /// TransferDenom defines a method for transferring a denom.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Imversed.Nft.MsgTransferDenomResponse> TransferDenomAsync(global::Imversed.Nft.MsgTransferDenom request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TransferDenomAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// TransferDenom defines a method for transferring a denom.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Imversed.Nft.MsgTransferDenomResponse> TransferDenomAsync(global::Imversed.Nft.MsgTransferDenom request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TransferDenom, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override MsgClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new MsgClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(MsgBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_IssueDenom, serviceImpl.IssueDenom)
          .AddMethod(__Method_UpdateDenom, serviceImpl.UpdateDenom)
          .AddMethod(__Method_MintNFT, serviceImpl.MintNFT)
          .AddMethod(__Method_EditNFT, serviceImpl.EditNFT)
          .AddMethod(__Method_TransferNFT, serviceImpl.TransferNFT)
          .AddMethod(__Method_BurnNFT, serviceImpl.BurnNFT)
          .AddMethod(__Method_TransferDenom, serviceImpl.TransferDenom).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, MsgBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_IssueDenom, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Imversed.Nft.MsgIssueDenom, global::Imversed.Nft.MsgIssueDenomResponse>(serviceImpl.IssueDenom));
      serviceBinder.AddMethod(__Method_UpdateDenom, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Imversed.Nft.MsgUpdateDenom, global::Imversed.Nft.MsgUpdateDenomResponse>(serviceImpl.UpdateDenom));
      serviceBinder.AddMethod(__Method_MintNFT, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Imversed.Nft.MsgMintNFT, global::Imversed.Nft.MsgMintNFTResponse>(serviceImpl.MintNFT));
      serviceBinder.AddMethod(__Method_EditNFT, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Imversed.Nft.MsgEditNFT, global::Imversed.Nft.MsgEditNFTResponse>(serviceImpl.EditNFT));
      serviceBinder.AddMethod(__Method_TransferNFT, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Imversed.Nft.MsgTransferNFT, global::Imversed.Nft.MsgTransferNFTResponse>(serviceImpl.TransferNFT));
      serviceBinder.AddMethod(__Method_BurnNFT, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Imversed.Nft.MsgBurnNFT, global::Imversed.Nft.MsgBurnNFTResponse>(serviceImpl.BurnNFT));
      serviceBinder.AddMethod(__Method_TransferDenom, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Imversed.Nft.MsgTransferDenom, global::Imversed.Nft.MsgTransferDenomResponse>(serviceImpl.TransferDenom));
    }

  }
}
#endregion
